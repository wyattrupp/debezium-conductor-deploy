services:
  # Nginx reverse proxy to handle CORS
  nginx:
    container_name: debezium-platform-nginx
    image: nginx:alpine
    ports:
      - "80:80"
    depends_on:
      - conductor
      - stage
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    command: ["/bin/sh", "-c", "nginx -g 'daemon off;'"]

  # PostgreSQL database for platform metadata
  postgres:
    container_name: debezium-platform-postgres
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=1"
      - "-c"
      - "max_replication_slots=1"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    container_name: debezium-zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  # Kafka broker
  kafka:
    container_name: debezium-kafka
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "9101:9101"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_JMX_PORT=9101
      - KAFKA_JMX_HOSTNAME=localhost
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Schema Registry
  schema-registry:
    container_name: debezium-schema-registry
    image: confluentinc/cp-schema-registry:7.5.0
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=kafka:29092
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081

  # Redpanda Console for Kafka UI
  redpanda-console:
    container_name: debezium-redpanda-console
    image: redpandadata/console:latest
    ports:
      - "8082:8080"
    depends_on:
      - kafka
      - schema-registry
    environment:
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_SCHEMAREGISTRY_ENABLED=true
      - KAFKA_SCHEMAREGISTRY_URLS=http://schema-registry:8081

  # ksqlDB Server
  ksqldb-server:
    container_name: debezium-ksqldb-server
    image: confluentinc/ksqldb-server:0.29.0
    ports:
      - "8088:8088"
    depends_on:
      - kafka
      - schema-registry
    environment:
      - KSQL_BOOTSTRAP_SERVERS=kafka:29092
      - KSQL_LISTENERS=http://0.0.0.0:8088
      - KSQL_KSQL_SERVICE_ID=debezium_ksql_
      - KSQL_KSQL_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE=true
      - KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE=true
      - KSQL_KSQL_CONNECT_URL=http://kafka-connect:8083
    volumes:
      - ./ksql:/opt/ksql

  # ksqlDB CLI
  ksqldb-cli:
    container_name: debezium-ksqldb-cli
    image: confluentinc/ksqldb-cli:0.29.0
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  # Kafka Connect
  kafka-connect:
    container_name: debezium-kafka-connect
    image: confluentinc/cp-kafka-connect:7.5.0
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - schema-registry
      - postgres
    environment:
      - CONNECT_BOOTSTRAP_SERVERS=kafka:29092
      - CONNECT_REST_PORT=8083
      - CONNECT_GROUP_ID=kafka-connect
      - CONNECT_CONFIG_STORAGE_TOPIC=_connect-configs
      - CONNECT_OFFSET_STORAGE_TOPIC=_connect-offsets
      - CONNECT_STATUS_STORAGE_TOPIC=_connect-status
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_KEY_CONVERTER=io.confluent.connect.avro.AvroConverter
      - CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CONNECT_VALUE_CONVERTER=io.confluent.connect.avro.AvroConverter
      - CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CONNECT_INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect
      - CONNECT_PLUGIN_PATH=/usr/share/java,/usr/share/confluent-hub-components
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.7.4
        /etc/confluent/docker/run

  # Debezium Platform Conductor (Backend API)
  conductor:
    container_name: debezium-platform-conductor
    image: quay.io/debezium/platform-conductor:latest
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Quarkus datasource configuration
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgres:5432/postgres
      - QUARKUS_DATASOURCE_USERNAME=user
      - QUARKUS_DATASOURCE_PASSWORD=password
      - QUARKUS_DATASOURCE_DB_KIND=postgresql
      # Pipeline configuration
      - PIPELINE_OFFSET_STORAGE_CONFIG_JDBC_URL=jdbc:postgresql://postgres:5432/postgres
      - PIPELINE_OFFSET_STORAGE_CONFIG_JDBC_USERNAME=user
      - PIPELINE_OFFSET_STORAGE_CONFIG_JDBC_PASSWORD=password
      - PIPELINE_SCHEMA_HISTORY_CONFIG_JDBC_URL=jdbc:postgresql://postgres:5432/postgres
      - PIPELINE_SCHEMA_HISTORY_CONFIG_JDBC_USERNAME=user
      - PIPELINE_SCHEMA_HISTORY_CONFIG_JDBC_PASSWORD=password
      # CORS configuration
      - QUARKUS_HTTP_CORS=true
      - QUARKUS_HTTP_CORS_ORIGINS=/.*/
      - QUARKUS_HTTP_CORS_ACCESS_CONTROL_ALLOW_CREDENTIALS=true

  # Debezium Platform Stage (Frontend UI)
  stage:
    container_name: debezium-platform-stage
    image: quay.io/debezium/platform-stage:latest
    ports:
      - "3000:3000"
    depends_on:
      - conductor
    environment:
      - REACT_APP_API_BASE_URL=http://localhost

volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
